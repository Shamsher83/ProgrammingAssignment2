## Put comments here that give an overall description of what your
## functions do

## Write a short comment describing this function
## The function is used to create a matrix object that can cache its
## inverse for the input which is an invertible square matrix. 

makeCacheMatrix <- function(x = matrix()) {
        inv <- NULL
        set <- function(y){
                x <<- y
                m <<- NULL
        }
        get <- function() x
        setinv <- function(inverse) inv <<- inverse
        getinv <- function() inv
        list(set = set, get = get, setinv = setinv, getinv = getinv)

}

## Write a short comment describing this function
## It is a function which creates the inverse of the matrix returned by 
## makecacheMatrix function. If the inverse of the matrix has been calculated
## and the matrix has not chaged then cacheSolve would retrieve the stored value
## of the matrix thus saving time and calculation. 

cacheSolve <- function(x, ...) {
        ##Return a matrix that is inerse of 'x'
        inv <- x$getinv()
        if(!is.null(inv)) {
                message("getting cached data")
                return(inv)
        }
        data <- x$get()
        inv <- solve(data, ...)
        x$setinv(inv)
        inv
}

